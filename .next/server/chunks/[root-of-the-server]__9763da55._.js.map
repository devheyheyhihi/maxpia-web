{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/sinseonghyeon/Documents/GitHub/01-blockchain-projects/maxpia-project/maxpia-web/src/app/api/email/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport nodemailer from 'nodemailer';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { name, email, message, service } = await request.json();\n\n    if (!name || !email || !message || !service) {\n      return NextResponse.json({ success: false, error: '모든 필드를 입력해주세요.' }, { status: 400 });\n    }\n\n    const transporter = nodemailer.createTransport({\n      host: process.env.EMAIL_SERVER_HOST,\n      port: Number(process.env.EMAIL_SERVER_PORT),\n      secure: Number(process.env.EMAIL_SERVER_PORT) === 465, // true for 465, false for other ports\n      auth: {\n        user: process.env.EMAIL_SERVER_USER,\n        pass: process.env.EMAIL_SERVER_PASSWORD,\n      },\n    });\n\n    const mailOptions = {\n      from: `\"${name}\" <${process.env.EMAIL_SERVER_USER}>`,\n      to: process.env.EMAIL_TO,\n      subject: `[${service}] 서비스 문의가 도착했습니다.`,\n      html: `\n        <h2>새로운 서비스 문의</h2>\n        <p><strong>서비스:</strong> ${service}</p>\n        <p><strong>보낸 사람:</strong> ${name}</p>\n        <p><strong>이메일:</strong> ${email}</p>\n        <hr>\n        <h3>내용:</h3>\n        <p style=\"white-space: pre-wrap;\">${message}</p>\n      `,\n    };\n\n    await transporter.sendMail(mailOptions);\n\n    return NextResponse.json({ success: true });\n\n  } catch (error) {\n    console.error('Email sending error:', error);\n    return NextResponse.json({ success: false, error: '이메일 발송에 실패했습니다.' }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE5D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtF;QAEA,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC7C,MAAM,QAAQ,GAAG,CAAC,iBAAiB;YACnC,MAAM,OAAO,QAAQ,GAAG,CAAC,iBAAiB;YAC1C,QAAQ,OAAO,QAAQ,GAAG,CAAC,iBAAiB,MAAM;YAClD,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,MAAM,QAAQ,GAAG,CAAC,qBAAqB;YACzC;QACF;QAEA,MAAM,cAAc;YAClB,MAAM,CAAC,CAAC,EAAE,KAAK,GAAG,EAAE,QAAQ,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACpD,IAAI,QAAQ,GAAG,CAAC,QAAQ;YACxB,SAAS,CAAC,CAAC,EAAE,QAAQ,iBAAiB,CAAC;YACvC,MAAM,CAAC;;iCAEoB,EAAE,QAAQ;mCACR,EAAE,KAAK;iCACT,EAAE,MAAM;;;0CAGC,EAAE,QAAQ;MAC9C,CAAC;QACH;QAEA,MAAM,YAAY,QAAQ,CAAC;QAE3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAE3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACvF;AACF","debugId":null}}]
}